# %%
import json
from pathlib import Path
from typing import List, Dict, Any
from Utils.jsun import load_json
from collections import Counter
from matplotlib import pyplot as plt
import numpy as np

current_path = Path(__file__)
base_path = current_path.parent
path = base_path / "logs/experiment_2025-07-10T14_40_51/hp_config_1/sessions.json"

data = load_json(Path(path))
command_session_lengths: List[int] = []

number_of_unique_techniques = []
number_of_unique_tactics = []
unique_techniques = []
unique_tactics = []

session_lengths = []

for session in data:
    session_lengths.append(session.get("length", 0))

    for command in session.get("full_session", []):
        technique = command.get("technique", "")
        tactic = command.get("tactic", "")
        if tactic and tactic not in unique_tactics:
            unique_tactics.append(tactic)
        if technique and technique not in unique_techniques:
            unique_techniques.append(technique)
    print(unique_tactics)
    number_of_unique_techniques.append(len(unique_techniques))
    number_of_unique_tactics.append(len(unique_tactics))


# %%
# Find the maximum values and their indices
max_values = []
max_indices = []
current_max = 0
for i, value in enumerate(number_of_unique_techniques):
    if value > current_max:
        current_max = value
        max_values.append(value)
        max_indices.append(i)
    else:
        max_values.append(current_max)
        max_indices.append(max_indices[-1] if max_indices else 0)


plt.figure(figsize=(12, 6))
scatter = plt.scatter(range(len(number_of_unique_techniques)), number_of_unique_techniques, c=session_lengths, cmap='copper', s=100)
plt.colorbar(scatter, label='Session Length')
plt.title("Number of Unique Techniques per Session")
plt.xlabel("Session")
plt.ylabel("Number of Unique Techniques")
plt.grid()
plt.plot(max_indices, max_values, 'k--', linewidth=2, alpha=0.7, label='Peak Connection')
plt.legend()
plt.show()


# %% same for tactics
plt.figure(figsize=(12, 6))
scatter = plt.scatter(range(len(number_of_unique_tactics)), number_of_unique_tactics, c=session_lengths, cmap='copper', s=100)
plt.colorbar(scatter, label='Session Length')
plt.title("Number of Unique Tactics per Session")
plt.xlabel("Session")
plt.ylabel("Number of Unique Tactics")
plt.grid()
plt.plot(max_indices, max_values, 'k--', linewidth=2, alpha=0.7, label='Peak Connection')
plt.legend()
plt.show()

# %%